import json

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State

import config as sc
import keyboards as kb
import weather as wth

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞

bot = Bot(token=sc.API_TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
city = '–ú–æ—Å–∫–≤–∞'
period = '–ù–∞ —Å–µ–π—á–∞—Å'
flg_weather = 0
with open("city_catalog.json", 'r', encoding='utf-8') as file:
    json_load = json.load(file)


# –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Weather_machine_state(StatesGroup):
    city = State()
    period = State()
    cur_date = State()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤

@dp.message_handler(commands=['cancel'], state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    if state is None:
        return

    await state.finish()
    await message.reply('–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ –ø–æ–∏—Å–∫!')


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message) -> None:
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n–Ø –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏ –ö–µ—Ñ—Ç–µ–º–µ–µ üåå, \n–Ω–∞—à–∏ –±–∞—Ä—Ö–∞—Ç–Ω—ã–µ —Ç—è–≥–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ç–∞–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è, —á—Ç–æ –º—ã –ø—Ä–∏–ª–µ—Ç–µ–ª–∏ –∫ –≤–∞–º —Å–∫–≤–æ–∑—å —Å–∞–º–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ-–≤—Ä–µ–º—è —Å –ø–ª–∞–Ω–µ—Ç—ã –ù–∏–±–∏—Ä—É –¥–ª—è –Ω–∞–ª–∞–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞.\n\n"
        "–ú—ã —É–∂–µ –¥–∞–≤–Ω–æ –Ω–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤–∞—à–µ–π –ø–ª–∞–Ω–µ—Ç–æ–π –∏ –∑–Ω–∞–µ–º –ø—Ä–æ –Ω–µ–µ –¥–∞–∂–µ –±–æ–ª—å—à–µ —á–µ–º –≤—ã. üôÉ\n\n–í–æ—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –≥–æ—Ä–æ–¥ –∏ –¥–∞—Ç—É –∏ —Ç—É—Ç –∂–µ –ø–æ–ª—É—á–∏—à—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã. üëá",
        reply_markup=kb.markup_talk_start)


@dp.message_handler(Text(equals="–ü–æ–≥–æ–¥–∞, —Å–µ—Ä—å–µ–∑–Ω–æ?"))
async def process_pogoda_command(message: types.Message):
    await message.answer(text="–î–∞, –±—Ä–∞—Ç–∏—à–∫–∞, –∞ —Ç—ã —á—Ç–æ —Ö–æ—Ç–µ–ª?\n–û—Ç–ø—Ä–∞–≤—å –≥–æ—Ä–æ–¥, —è —Ç–µ–±–µ –≤—Å–µ –ø–æ–∫–∞–∂—É")
    await Weather_machine_state.city.set()


@dp.message_handler(lambda message: message.text, state=Weather_machine_state.city)
async def load_city(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['city'] = message.text if message.text[0].isupper() else message.text[0].upper() + message.text[1:]
        city = data['city']
        if kb.check_the_dick_for_key(json_load,
                                     data['city'] if data['city'].isupper() else data['city'][0].upper() + data['city'][
                                                                                                           1:]):
            await message.answer("–ö–ï–§–¢–ï–ú–ï–ï, —â–∞—Å –≤—Å–µ –±—É–¥–µ—Ç.\n–£–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –ø–æ-–±—Ä–∞—Ç—Å–∫–∏.",
                                 reply_markup=kb.markup_weather_period)
            await Weather_machine_state.next()
        else:
            await message.answer("–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç üëâüëà.... \n–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?")
            data['city'] = message.text if message.text[0].isupper() else message.text[0].upper() + message.text[1:]
            city = data['city']


@dp.message_handler(lambda message: message.text, state=Weather_machine_state.period)
async def load_period(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:

        data['period'] = message.text if message.text[0].isupper() else message.text[0].upper() + message.text[1:]
        data['city'] = city

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–∏–æ–¥–æ–≤
    if data['period'] in kb.weather_periods:
        if data['period'] == "–ù–∞ –º–µ—Å—è—Ü":
            await message.answer("–õ–æ–≤–∏, –î–æ—Ä–æ–≥–æ–π")
            for el in wth.get_month(city):
                await message.answer(el)
            await message.answer("–ß—Ç–æ-—Ç–æ –µ—â–µ? :)", reply_markup=kb.markup_retry)
            await state.finish()

        elif data['period'] == "–ù–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏":
            await message.answer("–õ–æ–≤–∏, –î–æ—Ä–æ–≥–æ–π")
            for el in wth.get_2week(city):
                await message.answer(el)
            await message.answer("–ß—Ç–æ-—Ç–æ –µ—â–µ? :)", reply_markup=kb.markup_retry)
            await state.finish()

        elif data['period'] == "–ù–∞ —Å–µ–π—á–∞—Å":
            await message.answer("–õ–æ–≤–∏, –î–æ—Ä–æ–≥–æ–π")
            await message.answer(wth.get_now(city))
            await message.answer("–ß—Ç–æ-—Ç–æ –µ—â–µ? :)", reply_markup=kb.markup_retry)
            await state.finish()

        elif data['period'] == "–ù–∞ –±–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å":
            await message.answer("–ö–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –¥–µ–Ω–µ–∫ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")

            for el in kb.find_10_day_periods(data['city']):
                await message.answer(el)
            await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
            await Weather_machine_state.next()


    else:
        await message.answer("–¢–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –Ω–µ—Ç üëâüëà... \n–ú–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞?",
                             reply_markup=kb.markup_weather_period)


@dp.message_handler(lambda message: message.text, state=Weather_machine_state.cur_date)
async def load_cur_date(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['cur_date'] = message.text
    await message.answer("–õ–æ–≤–∏, –î–æ—Ä–æ–≥–æ–π")
    for el in wth.get_one_from_ten(data['city'], int(data['cur_date'])):
        await message.answer(el)
    await message.answer("–ß—Ç–æ-—Ç–æ –µ—â–µ? :)", reply_markup=kb.markup_retry)
    await state.finish()


@dp.message_handler(Text(equals="–ï—â–µ –ø–æ-–±—Ä–∞—Ç—Å–∫–∏"))
async def retry_call(message: types.Message):
    await message.answer(text="–ö–ï–§–¢–ï–ú–ï–ï, —â–∞—Å –≤—Å–µ –±—É–¥–µ—Ç.\n–£–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –ø–æ-–±—Ä–∞—Ç—Å–∫–∏.",
                         reply_markup=kb.markup_weather_period)
    await Weather_machine_state.period.set()


@dp.message_handler(Text(equals="–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥"))
async def change_city_call(message: types.Message):
    await message.answer(text="–ö–∞–∫ —Å–∫–∞–∂–µ—à—å, –±—Ä–∞—Ç–∏–∫, —Å–µ–π—á–∞—Å –≤—Å–µ –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º\n–£–∫–∞–∂–∏ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –∏ –≤—Å–µ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ. üëá")
    await Weather_machine_state.city.set()



# –∑–∞–ø—É—Å–∫ –∫–æ–¥–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)
