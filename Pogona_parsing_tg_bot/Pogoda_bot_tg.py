import json

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State

import config as sc
import keyboards as kb
import weather as wth

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞

bot = Bot(token=sc.API_TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
city = '–ú–æ—Å–∫–≤–∞'
period = '–ù–∞ —Å–µ–π—á–∞—Å'
flg_weather = 0
with open("city_catalog.json", 'r', encoding='utf-8') as file:
    json_load = json.load(file)


# –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Weather_machine_state(StatesGroup):
    city = State()
    period = State()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤

@dp.message_handler(commands=['cancel'], state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    if state is None:
        return

    await state.finish()
    await message.reply('–í—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ –ø–æ–∏—Å–∫!')


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message) -> None:
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç!\n\n–Ø –ø–æ—Å–ª–µ–¥–Ω–∏–π –∂–∏—Ç–µ–ª—å –≥–æ—Ä–æ–¥–∞, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –º–∞—à–∏–Ω–∞–º–∏, –ø–æ–∫–∞ –º–æ–∏ –∫–æ–ª–ª–µ–≥–∏ –ø—Ä–∏–¥—É–º—ã–≤–∞—é—Ç –∫–∞–∫ –∂–µ —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –ª—é–¥–∏—à–µ–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–π,"
        " —è –±—É–¥—É —Ä–∞–¥ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏!\n\n–£–∫–∞–∂–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è –≥–æ—Ä–æ–¥ –∏ –¥–∞—Ç—É –∏ —Ç—É—Ç –∂–µ –ø–æ–ª—É—á–∏—à—å –æ—Ç–≤–µ—Ç.",
        reply_markup=kb.markup_talk_start)


@dp.message_handler(Text(equals="–ü–æ–≥–æ–¥–∞, —Å–µ—Ä—å–µ–∑–Ω–æ?"))
async def process_pogoda_command(message: types.Message):
    await message.answer(text="–î–∞, –ª—é–¥–∏—à–∫–∞, –Ω–∞–ø–∏—à–∏ –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∏ —è –ø—Ä–∏–æ—Ç–∫—Ä–æ—é –∑–∞–≤–µ—Å—É —Ç–∞–π–Ω\n")
    await Weather_machine_state.city.set()


@dp.message_handler(state=Weather_machine_state.city)
async def load_city(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['city'] = message.text if message.text[0].isupper() else message.text[0].upper() + message.text[1:]
        if kb.check_the_dick_for_key(json_load,
                                     data['city'] if data['city'].isupper() else data['city'][0].upper() + data['city'][
                                                                                                           1:]):
            await message.answer("–Ø —Ç–µ–±—è —É—Å–ª—ã—à–∞–ª, –¥–æ—Ä–æ–≥–æ–π, —â–∞—Å –≤—Å–µ –±—É–¥–µ—Ç.\n–£–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –ø–æ-–±—Ä–∞—Ç—Å–∫–∏",
                                 reply_markup=kb.markup_weather_period)
            await Weather_machine_state.next()
        else:
            await message.answer("–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç üëâüëà.... \n–ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?")
            data['city'] = message.text if message.text[0].isupper() else message.text[0].upper() + message.text[1:]


@dp.message_handler(state=Weather_machine_state.period)
async def load_period(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        data['period'] = message.text if message.text[0].isupper() else message.text[0].upper() + message.text[1:]

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–∏–æ–¥–æ–≤
    if data['period'] in kb.weather_periods:
        await message.answer("–õ–æ–≤–∏, –î–æ—Ä–æ–≥–æ–π", reply_markup=kb.markup_retry)
        if data['period'] == "–ù–∞ –º–µ—Å—è—Ü":
            for el in wth.get_month(city):
                await message.answer(el)

        elif data['period'] == "–ù–∞ –¥–≤–µ –Ω–µ–¥–µ–ª–∏":
            for el in wth.get_2week(city):
                await message.answer(el)

        elif data['period'] == "–ù–∞ —Å–µ–π—á–∞—Å":
            await message.answer(wth.get_now(city))

        elif data['period'] == "–ù–∞ —Å–µ–≥–æ–¥–Ω—è":
            for el in wth.get_day(city, ""):
                await message.answer(el)

        elif data['period'] == "–ù–∞ –∑–∞–≤—Ç—Ä–∞":
            for el in wth.get_day(city, "tomorrow"):
                await message.answer(el)

        elif data['period'] == "–ù–∞ 3 –¥–Ω—è":
            for el in wth.get_3days(city):
                await message.answer(el)

        await state.finish()
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –Ω–µ—Ç üëâüëà... \n–ú–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞?",
                             reply_markup=kb.markup_weather_period)


@dp.message_handler(Text(equals="–ï—â–µ –ø–æ-–±—Ä–∞—Ç—Å–∫–∏"))
async def retry_call(message: types.Message):
    await message.answer(text="–ê–π–π–π–π–π, –î–æ—Ä–æ–≥–æ–π, —è –≤ —Ç–µ–±–µ –Ω–µ —Å–æ–º–Ω–µ–≤–∞–ª—Å—è, –∫—É–¥–∞ —Ç–µ–±—è –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –¥–æ–º—á–∞—Ç—å?\n")
    await Weather_machine_state.city.set()


# –∑–∞–ø—É—Å–∫ –∫–æ–¥–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
